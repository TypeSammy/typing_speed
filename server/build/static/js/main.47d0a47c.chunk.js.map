{"version":3,"sources":["component/SetMinutes.js","component/TextArea.js","component/Countdown.js","component/Statistics.js","component/TypingSpeed.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","Div","div","SetMinutes","getParagraphs","btnDisplay","className","id","onClick","Section","section","Textarea","textarea","Span","span","TextArea","paragraphs","userInput","typingDisplay","handleUserInput","handleStartCountdown","map","string","i","color","length","style","backgroundColor","onChange","P","p","Countdown","seconds","displayMinutes","isTimerOn","Math","floor","displaySeconds","H2","h2","Input","input","Highlight","Statistics","statistics","statsDisplay","setMinutesDisplay","setStatsDisplay","accuracy","toFixed","slice","randomName","wpm","random","placeholder","H1","h1","TypingSpeed","useState","setParagraphs","setUserInput","minutesDisplay","textAreaDisplay","setTextAreaDisplay","inaccuracteCount","setInaccurateCount","setSeconds","min","setMin","setIsTimerOn","intervalId","setIntervalId","setStatistics","clearInterval","axios","get","1","3","5","then","res","array","data","responseObj","paragraph","join","split","e","newValue","target","value","startTime","setInterval","forEach","letter","nativeEvent","inputType","allSpanLetter","document","querySelectorAll","getBoundingClientRect","right","querySelector","scrollTop","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.47d0a47c.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst Button = styled.button`\n  font-family: 'Lato',sans-serif;\n  border: none;\n  margin: 0.5em;\n  background: var(--moss);\n  width: 23%;\n  height: 13%;\n  border-radius: 15px;\n  color: rgb(255 255 255);\n  font-size: 1em;\n  &:hover {\n    background: none;\n    border: solid 1.5px var(--moss);\n  }\n`\n\nconst Div = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  background-color: var(--khaki);\n  height: 500px;\n  border-radius: 3em 1em 3em 1em;\n`\n\nfunction SetMinutes({ getParagraphs, btnDisplay }) {\n  return (\n    <Div className='SetTimerBtn' id={btnDisplay ? null : 'hidden'}>\n      <Button onClick={() => getParagraphs(1)}>1 Minute</Button>\n      <Button onClick={() => getParagraphs(3)}>3 Minutes</Button>\n      <Button onClick={() => getParagraphs(5)}>5 Minutes</Button>\n    </Div>\n  )\n}\n\nexport default SetMinutes","import styled from 'styled-components'\n\nconst Section = styled.section`\n  background: var(--khaki);\n  border-radius: 3em 1em 3em 1em;\n  height: 500px\n`\n\nconst Div = styled.div`\n  height: 420px;\n  width: 85%;\n  margin: 0 auto;\n  font-size: 1.5em;\n  overflow-y: scroll;\n  overflow: hidden;\n  grid-column: 1;\n  grid-row: 1;\n  text-align: left;\n  line-height: 48px;\n  font-family: 'Be Vietnam Pro', sans-serif;\n  color: rgb(61 61 61);\n}\n`\n\nconst Textarea = styled.textarea`\n  height: 420px;\n  margin: 0 auto;\n  width: 85%;\n  letter-spacing: 6px;\n  /* height: 50px; */\n  font-size: 1.5em;\n  resize: none;\n  opacity: 0;\n  cursor: default;\n  grid-column: 1;\n  grid-row: 1;\n  font-family: 'Be Vietnam Pro', sans-serif;\n  line-height: 1.8em;\n`\n\nconst Span = styled.span`\n  border-radius: 3px;\n  border: 1px solid var(--khaki);\n  padding: 0 2px;\n`\n\nfunction TextArea({ paragraphs, userInput, typingDisplay, handleUserInput, handleStartCountdown }) {\n  // const splitParagraph = paragraphs.split('')\n  const correctCol = 'rgb(165 213 148)'\n  const incorrectCol = 'rgb(254 139 139)'\n\n  return (\n    <Section className='game-container' id={typingDisplay ? null : 'hidden'}>\n      <Div className='paragraphs'>\n        {paragraphs.map((string, i) => {\n          let color = ''\n          if (i < userInput.length) {\n            string === userInput[i] ? color = correctCol : color = incorrectCol\n          }\n          return (\n            <Span\n              className='letter'\n              style={{ backgroundColor: color }}\n              key={i + string}>{string}\n            </Span>\n          )\n        })}\n      </Div>\n      <Textarea\n        className='text-input'\n        onChange={handleUserInput}\n      ></Textarea>\n    </Section>\n  )\n}\n\nexport default TextArea\n\n// To adjust height of paragraphs:\n// document.querySelector('.paragraphs').scrollTop = 160\n// 160 will move top line up to display the next\n// +160 every time ???? figure out\n\n// To get dimension of text area:\n// document.querySelector('.text-input').clientWidth\n\n// us .focus to access the textarea after button click","import styled from 'styled-components'\n\nconst Div = styled.div`\n  display: flex;\n  justify-content: center;\n  color: var(--moss);\n  font-size: 1.3em;\n  width: 50%;\n  gap: 10px;\n  margin: 22px auto;\n  letter-spacing: 3px;\n  border-top: 1px solid var(--moss);\n  border-bottom: 1px solid var(--moss);\n  padding: 0.5em;\n`\n\nconst P = styled.p`\n  color: var(--moss);\n`\n\nfunction Countdown({ seconds, isTimerOn }) {\n  let displayMinutes = Math.floor(seconds / 60)\n  let displaySeconds = seconds % 60\n\n  return (\n    <Div >\n      <P>Timer </P>\n      <P>0{displayMinutes}:{displaySeconds === 0 ? '00' : displaySeconds}</P>\n    </Div>\n  )\n}\n\nexport default Countdown\n\n// id={isTimerOn ? null : 'hidden'}","import { useState } from 'react'\nimport styled from 'styled-components'\n\nconst H2 = styled.h2`\n  color: var(--moss);\n  margin: 0;\n  font-size: 5em;\n  font-family: 'Abril Fatface';\n`\n\nconst Div = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 16px;\n  background: var(--khaki);\n  border-radius: 3em 1em 3em 1em;\n  color: rgb(255 255 255);\n  height: 500px;\n  padding: 30px;\n  flex-direction: column;\n`\n\nconst Input = styled.input`\n  width: 200px;\n  align-self: center;\n  padding: 10px;\n  border: none;\n  border-radius: 16px;\n  background: var(--beige);\n  height: 20px;\n  width: 362px;\n  text-align: center;\n  font-size: 1.2em;\n  padding: 17px;\n  ::placeholder {\n    color: rgb(145, 170, 157);\n  }\n`\n\nconst Button = styled.button`\n  font-family: 'Lato',sans-serif;\n  border: none;\n  margin: 0.5em;\n  background: var(--moss);\n  width: 12em;\n  height: 3em;\n  border-radius: 15px;\n  color: rgb(255 255 255);\n  font-size: 1em;\n  align-self: center;\n  &:hover {\n    background: none;\n    border: solid 1.5px var(--moss);\n  }\n`\n\nconst Highlight = styled.span`\n  color: var(--chocolate);\n  border: none;\n  font-size: 1.5em;\n`\n\nfunction Statistics({ statistics, statsDisplay, setMinutesDisplay, setStatsDisplay }) {\n  // const [userName, setUserName] = useState(null)\n  const accuracy = statistics.accuracy < 1 ? statistics.accuracy.toFixed(2).slice(2) : 100\n  let randomName = 'bob'\n  if (statistics.wpm != 0) {\n    randomName = `User_${Math.floor(Math.random() * 4000)}`\n  }\n  // setUserName('randomName')\n\n  const submit = () => {\n    // capture userName and send into database\n    // re-render leaderboard with an axios request?\n  }\n\n  const again = () => {\n    setMinutesDisplay(true)\n    setStatsDisplay(false)\n  }\n\n  return (\n    <Div id={statsDisplay ? null : 'hidden'}>\n      <H2>Time's up!</H2>\n      <p>You typed with <Highlight>{statistics.wpm}</Highlight> WPM with <Highlight>{accuracy}%</Highlight> accuracy.</p>\n      <Input className='username' placeholder={randomName} ></Input>\n      <span>\n        <Button onClick={submit}>Submit your score</Button>\n        <Button onClick={again}>Try again</Button>\n      </span>\n    </Div>\n  )\n}\n\nexport default Statistics","import SetMinutes from './SetMinutes.js'\nimport './TypingSpeed.css'\nimport TextArea from './TextArea.js'\nimport Countdown from \"./Countdown.js\"\nimport axios from 'axios'\nimport { useState } from 'react'\nimport styled from 'styled-components'\nimport Statistics from './Statistics'\n\nconst H1 = styled.h1`\n  color: var(--chocolate);\n  margin: 40px 0 20px 0;\n  font-size: 3.5em;\n  font-family: 'Abril Fatface';\n`\n\nfunction TypingSpeed() {\n  const defaultStats = {\n    wpm: 0,\n    accuracy: 0\n  }\n  // State for typing section\n  const [paragraphs, setParagraphs] = useState([])\n  const [userInput, setUserInput] = useState([])\n\n  // State for visibility components\n  const [minutesDisplay, setMinutesDisplay] = useState(true)\n  const [textAreaDisplay, setTextAreaDisplay] = useState(false)\n  const [statsDisplay, setStatsDisplay] = useState(false)\n\n  // State for inacuracy count\n  const [inaccuracteCount, setInaccurateCount] = useState(0)\n\n  // State for countdown\n  const [seconds, setSeconds] = useState(null)\n  const [min, setMin] = useState(0)\n  const [isTimerOn, setIsTimerOn] = useState(false)\n\n  const [intervalId, setIntervalId] = useState(null)\n\n  const [statistics, setStatistics] = useState(defaultStats)\n\n  function getParagraphs(min) {\n    const amount = {\n      1: 15,\n      3: 30,\n      5: 50\n    }\n    axios.get(`/api/paragraphs/${amount[min]}`)\n      .then(res => {\n        const array = res.data.map(responseObj => responseObj.paragraph)\n        // join to create 1 string, split to create an array with each 1 item as each string\n        setParagraphs(array.join(' ').split(''))\n      })\n      .then(setMinutesDisplay(false), setTextAreaDisplay(true)) // TODO check if i can use switch feature?\n      .then(setSeconds(min * 60), setMin(min))\n  }\n\n  function handleUserInput(e) {\n    // check if timer has started\n    const newValue = e.target.value.split('')\n    setUserInput(newValue)\n\n    let startTime = seconds\n    if (!isTimerOn && seconds > 0) {\n      // declaring the TIME state into a new variable and mutate that instead => read up on CLOSURES\n      let id = setInterval(() => {\n        startTime--\n        setSeconds(startTime)\n      }, 1000)\n      setIsTimerOn(true)\n      setIntervalId(id)\n    }\n\n    // increment inaccurate amount\n    newValue.forEach((letter, i) => {\n      if (e.nativeEvent.inputType === 'insertText') {\n        letter !== paragraphs[i] ? setInaccurateCount(inaccuracteCount + 1) : setInaccurateCount(inaccuracteCount)\n      }\n    })\n\n    const allSpanLetter = document.querySelectorAll('.letter')\n    const currentInputLocation = allSpanLetter[userInput.length].getBoundingClientRect().right\n    const nextInputLocation = allSpanLetter[userInput.length + 1].getBoundingClientRect().right\n\n    if (currentInputLocation > nextInputLocation) {\n      document.querySelector('.paragraphs').scrollTop += 46\n    }\n  }\n\n  if (intervalId != null) {\n    if (seconds === 0) {\n      end()\n    }\n  }\n\n  function end() {\n    clearInterval(intervalId)\n    setIntervalId(null)\n    setIsTimerOn(false)\n    setSeconds(null)\n    setParagraphs([])\n    setUserInput([])\n    setInaccurateCount(0)\n    setStatistics({\n      wpm: (userInput.length / 5) / min,\n      accuracy: (userInput.length - inaccuracteCount) / userInput.length\n    })\n    setStatsDisplay(true)\n    setTextAreaDisplay(false)\n    setMin(0)\n\n  }\n\n  return (\n    <div className='TypingSpeed'>\n      <H1>TYPING SPEED TEST</H1>\n      <Countdown\n        seconds={seconds}\n        isTimerOn={isTimerOn}\n      />\n      <SetMinutes\n        getParagraphs={getParagraphs}\n        btnDisplay={minutesDisplay}\n      />\n      <TextArea\n        paragraphs={paragraphs}\n        userInput={userInput}\n        typingDisplay={textAreaDisplay}\n        handleUserInput={handleUserInput}\n        inaccuracteCount={inaccuracteCount}\n      />\n      <Statistics\n        statistics={statistics}\n        statsDisplay={statsDisplay}\n        setMinutesDisplay={setMinutesDisplay}\n        setStatsDisplay={setStatsDisplay}\n      />\n    </div>\n  )\n}\n\nexport default TypingSpeed\n\n// WPM calculation:\n// Get character length and divide by 5 (WPM is 1 word = 5 char)\n// total words divide by minutes\n\n// Accuracy calculations\n// Get character length and subtract inaccurateCount (inaccurate count does not include backspaces)\n// Get the correct character count and divide it by the character length\n// if return value is 1 => 100%\n// if return value is < 1 => returnedValue.toFixed(2)\n\n\n\n// GET position of current userInput:\n// getBoundingClientRect().right\n\n// GET position of paragraph[userInput.length]\n\n// Example, current end of para line is 800, next line beginning is 304","import './App.css';\nimport { useState } from 'react'\nimport TypingSpeed from './component/TypingSpeed'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TypingSpeed />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}