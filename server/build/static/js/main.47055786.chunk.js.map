{"version":3,"sources":["component/SetMinutes.js","component/TextArea.js","component/Countdown.js","component/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","Div","div","SetMinutes","getParagraphs","btnDisplay","className","id","onClick","Section","section","Textarea","textarea","Span","span","TextArea","paragraphs","userInput","typingDisplay","handleUserInput","document","querySelector","focus","map","string","i","color","length","style","backgroundColor","onChange","P","p","Countdown","seconds","displayMinutes","isTimerOn","Math","floor","displaySeconds","H2","h2","Highlight","Statistics","statistics","statsDisplay","setMinutesDisplay","setStatsDisplay","accuracy","toFixed","slice","wpm","H1","h1","BottomDiv","App","useState","setParagraphs","setUserInput","setStatistics","minutesDisplay","textAreaDisplay","setTextAreaDisplay","inaccuracteCount","setInaccurateCount","setSeconds","min","setMin","setIsTimerOn","intervalId","setIntervalId","clearInterval","value","axios","get","1","3","5","then","res","array","data","responseObj","paragraph","join","split","e","newValue","target","startTime","setInterval","inputType","nativeEvent","forEach","letter","allSpanLetter","querySelectorAll","currentInputLocation","getBoundingClientRect","right","nextInputLocation","scrollTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.47055786.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst Button = styled.button`\n  font-family: 'Lato',sans-serif;\n  border: none;\n  margin: 0.5em;\n  background: var(--moss);\n  width: 200px;\n  height: 80px;\n  border-radius: 15px;\n  color: rgb(255 255 255);\n  font-size: 1em;\n  font-weight: 600;\n  transition: 0.35s;\n  &:hover {\n    background: var(--darkmoss);\n  }\n`\n\nconst Div = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  background-color: var(--khaki);\n  height: 610px;\n  border-radius: 3em 1em 3em 1em;\n  width: 600px;\n  flex-direction: column;\n  margin: 0 auto;\n`\n\nfunction SetMinutes({ getParagraphs, btnDisplay }) {\n  return (\n    <Div className='SetTimerBtn' id={btnDisplay ? null : 'hidden'}>\n      <Button onClick={() => getParagraphs(1)}>ONE MINUTE</Button>\n      <Button onClick={() => getParagraphs(3)}>THREE MINUTES</Button>\n      <Button onClick={() => getParagraphs(5)}>FIVE MINUTES</Button>\n    </Div>\n  )\n}\n\nexport default SetMinutes","import styled from 'styled-components'\n\nconst Section = styled.section`\n  background: var(--khaki);\n  border-radius: 3em 1em 3em 1em;\n  height: 610px;\n  width: 600px;\n  margin: 0 auto;\n`\n\nconst Div = styled.div`\n  width: 70%;\n  height: 480px;\n  margin: 0 auto;\n  font-size: 1.5em;\n  overflow-y: scroll;\n  overflow: hidden;\n  grid-column: 1;\n  grid-row: 1;\n  text-align: left;\n  line-height: 48px;\n  font-family: 'Be Vietnam Pro', sans-serif;\n  color: rgb(121 85 72);\n`\n\nconst Textarea = styled.textarea`\n  height: 480px;\n  margin: 0 auto;\n  width: 85%;\n  letter-spacing: 6px;\n  /* height: 50px; */\n  font-size: 1.5em;\n  resize: none;\n  opacity: 0;\n  cursor: default;\n  grid-column: 1;\n  grid-row: 1;\n  font-family: 'Be Vietnam Pro', sans-serif;\n  line-height: 1.8em;\n`\n\nconst Span = styled.span`\n  border-radius: 4px;\n  border: 1px solid var(--khaki);\n  padding: 0 2px;\n`\n\nfunction TextArea({ paragraphs, userInput, typingDisplay, handleUserInput }) {\n  // const splitParagraph = paragraphs.split('')\n  const correctCol = 'rgb(189 223 177)'\n  const incorrectCol = 'rgb(252 186 164)'\n\n  if (typingDisplay) {\n    document.querySelector('textarea').focus()\n  }\n\n  return (\n    <Section className='game-container' id={typingDisplay ? null : 'hidden'}>\n      <Div className='paragraphs'>\n        {paragraphs.map((string, i) => {\n          let color = ''\n          if (i < userInput.length) {\n            string === userInput[i] ? color = correctCol : color = incorrectCol\n          }\n          return (\n            <Span\n              className='letter'\n              style={{ backgroundColor: color }}\n              key={i + string}>{string}\n            </Span>\n          )\n        })}\n      </Div>\n      <Textarea\n        className='text-input'\n        onChange={handleUserInput}\n      ></Textarea>\n    </Section>\n  )\n}\n\nexport default TextArea\n\n// To adjust height of paragraphs:\n// document.querySelector('.paragraphs').scrollTop = 160\n// 160 will move top line up to display the next\n// +160 every time ???? figure out\n\n// To get dimension of text area:\n// document.querySelector('.text-input').clientWidth\n\n// us .focus to access the textarea after button click","import styled from 'styled-components'\n\nconst Div = styled.div`\n  display: flex;\n  justify-content: center;\n  color: var(--moss);\n  font-size: 1.3em;\n  width: 50%;\n  gap: 10px;\n  margin: 22px auto;\n  letter-spacing: 3px;\n  border-top: 1px solid var(--moss);\n  border-bottom: 1px solid var(--moss);\n  padding: 0.5em;\n  position: relative;\n  top: -80px;\n`\n\nconst P = styled.p`\n  color: var(--moss);\n`\n\nfunction Countdown({ seconds, isTimerOn }) {\n  let displayMinutes = Math.floor(seconds / 60)\n  let displaySeconds = seconds % 60\n\n  return (\n    <Div >\n      <P>Timer </P>\n      <P>0{displayMinutes}:{displaySeconds === 0 ? '00' : displaySeconds}</P>\n    </Div>\n  )\n}\n\nexport default Countdown\n\n// id={isTimerOn ? null : 'hidden'}","import styled from 'styled-components'\n\nconst H2 = styled.h2`\n  color: var(--moss);\n  margin: 0;\n  font-size: 5em;\n  font-family: 'Abril Fatface';\n`\n\nconst Div = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 16px;\n  background: var(--khaki);\n  color: rgb(255 255 255);\n  height: 610px;\n  border-radius: 3em 1em 3em 1em;\n  width: 600px;\n  flex-direction: column;\n  margin: 0 auto;\n`\n\nconst Button = styled.button`\n  font-family: 'Lato',sans-serif;\n  border: none;\n  margin: 0.5em;\n  background: var(--moss);\n  width: 200px;\n  height: 80px;\n  border-radius: 15px;\n  color: rgb(255 255 255);\n  font-size: 1em;\n  font-weight: 600;\n  align-self: center;\n  transition: 0.35s;\n  &:hover {\n    background: var(--darkmoss);\n  }\n`\n\nconst Highlight = styled.span`\n  color: var(--chocolate);\n  border: none;\n  font-size: 1.5em;\n`\n\nfunction Statistics({ statistics, statsDisplay, setMinutesDisplay, setStatsDisplay }) {\n  const accuracy = statistics.accuracy < 1 ? statistics.accuracy.toFixed(2).slice(2) : 100\n  const wpm = statistics.wpm % 1 === 0 ? statistics.wpm : statistics.wpm.toFixed(1)\n\n  const again = () => {\n    setMinutesDisplay(true)\n    setStatsDisplay(false)\n  }\n\n  return (\n    <Div id={statsDisplay ? null : 'hidden'}>\n      <H2>Time's up!</H2>\n      <p>You typed with <Highlight>{wpm}</Highlight> WPM with <Highlight>{accuracy}%</Highlight> accuracy.</p>\n      <Button onClick={again}>TRY AGAIN</Button>\n    </Div>\n  )\n}\n\nexport default Statistics","import './App.css';\nimport { useState } from 'react'\nimport SetMinutes from './component/SetMinutes.js'\nimport TextArea from './component/TextArea.js'\nimport Countdown from \"./component/Countdown\"\nimport axios from 'axios'\nimport styled from 'styled-components'\nimport Statistics from './component/Statistics'\n\nconst Section = styled.section`\n  text-align: -webkit-center;\n  position: relative;\n  top: -60px;\n`\n\nconst H1 = styled.h1`\n  color: var(--chocolate);\n  margin: 0;\n  font-size: 17em;\n  font-family: 'Abril Fatface';\n  font-weight: 200;\n`\n\nconst H2 = styled.h2`\n  color: var(--chocolate);\n  margin: 0;\n  font-size: 4em;\n  font-family: 'Abril Fatface';\n  font-weight: 200;\n  letter-spacing: 49px;\n  position: relative;\n  top: -70px;\n`\n\nconst Div = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 260px;\n`\nconst BottomDiv = styled.div`\n  position: relative;\n  left: 0;\n  right: 0;\n  bottom: -350px;\n  z-index: -1;\n`\n\nfunction App() {\n  const defaultStats = {\n    wpm: 0,\n    accuracy: 0\n  }\n  // State for typing speed\n  const [paragraphs, setParagraphs] = useState([])\n  const [userInput, setUserInput] = useState([])\n  const [statistics, setStatistics] = useState(defaultStats)\n  // State for visibility components\n  const [minutesDisplay, setMinutesDisplay] = useState(true)\n  const [textAreaDisplay, setTextAreaDisplay] = useState(false)\n  const [statsDisplay, setStatsDisplay] = useState(false)\n  // State for inacuracy count\n  const [inaccuracteCount, setInaccurateCount] = useState(0)\n  // State for countdown\n  const [seconds, setSeconds] = useState(null)\n  const [min, setMin] = useState(0)\n  const [isTimerOn, setIsTimerOn] = useState(false)\n  // State for interval ID\n  const [intervalId, setIntervalId] = useState(null)\n\n  function getParagraphs(min) {\n    const amount = {\n      1: 5,\n      3: 20,\n      5: 30\n    }\n    axios.get(`/api/paragraphs/${amount[min]}`)\n      .then(res => {\n        const array = res.data.map(responseObj => responseObj.paragraph)\n        // join to create 1 string, split to create an array with each 1 item as each string\n        setParagraphs(array.join(' ').split(''))\n      })\n      .then(setMinutesDisplay(false), setTextAreaDisplay(true)) // TODO check if i can use switch feature?\n      .then(setSeconds(min * 60), setMin(min))\n  }\n\n  function handleUserInput(e) {\n    const newValue = e.target.value.split('')\n    setUserInput(newValue)\n\n    let startTime = seconds\n    if (!isTimerOn && seconds > 0) {\n      // declaring the TIME state into a new variable and mutate that instead => read up on CLOSURES\n      let id = setInterval(() => {\n        startTime--\n        setSeconds(startTime)\n      }, 1000)\n      setIsTimerOn(true)\n      setIntervalId(id)\n    }\n\n    // increment inaccurate amount\n    const inputType = e.nativeEvent.inputType\n    newValue.forEach((letter, i) => {\n      if (inputType === 'insertText') {\n        letter !== paragraphs[i] ? setInaccurateCount(inaccuracteCount + 1) : setInaccurateCount(inaccuracteCount)\n      }\n    })\n\n    // handles auto scrolling\n    const allSpanLetter = document.querySelectorAll('.letter')\n    const currentInputLocation = allSpanLetter[userInput.length].getBoundingClientRect().right\n    const nextInputLocation = allSpanLetter[userInput.length + 1].getBoundingClientRect().right\n\n    if (inputType === 'deleteContentBackward' && currentInputLocation > nextInputLocation) {\n      document.querySelector('.paragraphs').scrollTop -= 46\n    } else if (currentInputLocation > nextInputLocation) {\n      document.querySelector('.paragraphs').scrollTop += 46\n    }\n\n  }\n\n  // Checks if there is an Interval ID & if the time has reached 0\n  if (intervalId != null) {\n    if (seconds === 0) {\n      end()\n    }\n  }\n\n  // Resets most State back to default value\n  function end() {\n    clearInterval(intervalId)\n    setIntervalId(null)\n    setIsTimerOn(false)\n    setSeconds(null)\n    setParagraphs([])\n    setUserInput([])\n    setInaccurateCount(0)\n    document.querySelector('textarea').value = null\n    setStatistics({\n      wpm: (userInput.length / 5) / min,\n      accuracy: (userInput.length - inaccuracteCount) / userInput.length\n    })\n    setStatsDisplay(true)\n    setTextAreaDisplay(false)\n    setMin(0)\n  }\n\n  return (\n    <Section>\n      <H1>TYPING</H1>\n      <Div className='content-container'>\n        <SetMinutes\n          getParagraphs={getParagraphs}\n          btnDisplay={minutesDisplay}\n        />\n        <TextArea\n          paragraphs={paragraphs}\n          userInput={userInput}\n          typingDisplay={textAreaDisplay}\n          handleUserInput={handleUserInput}\n          inaccuracteCount={inaccuracteCount}\n        />\n        <Statistics\n          statistics={statistics}\n          statsDisplay={statsDisplay}\n          setMinutesDisplay={setMinutesDisplay}\n          setStatsDisplay={setStatsDisplay}\n        />\n      </Div>\n      <BottomDiv>\n        <H1>SPEED</H1>\n        <H2>TEST</H2>\n        <Countdown\n          seconds={seconds}\n          isTimerOn={isTimerOn}\n        />\n      </BottomDiv>\n    </Section>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}